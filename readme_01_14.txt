Абдель Маджид Али
АНАЛИТИЧЕСКОЕ РЕШЕНИE СИСТЕМ ЛИНЕЙНЫХ ДИФФЕРЕНЦИАЛЬНЫХ УРАВНЕНИЙ
Реализован обратный степенной метод

Описание интерфейса программы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Для работы с программой используются следующие ключи:
-d 				  печать отладочных сообщений
-e 				  печать ошибок
-p 				  печать матрицы
-t 				  печать времени выполнения
-max_evc_iter=<num>   маскимальное число итераций для модуля evc
-max_vec_iter=<num>	  маскимальное число итераций для модуля vec
-h 				  справка


Справка при работе с программой:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Usage: lde input_file_name output_file_name [options]
Where options include:
  -d    print debug messages [default OFF]
  -e    print errors [default OFF]
  -p    print matrix [default OFF]
  -t    print execution time [default OFF]
  -max_evc_iter=<num>   limit number of iterations for evc module
                    [default - 0, i.e. either not limit or compute limit automatically]
  -max_vec_iter=<num>   limit number of iterations for vec module
                    [default - 0, i.e. either not limit or compute limit automatically]
  -h, -?     print this and exit

Программа возвращает следующие коды ошибок после выполнения:

EXIT -1		  	 неверные параметры командной строки
ERR_MEM -2	  	 возникла ошибка при выделении памяти
ERR_FILE -3	   	возникла ошибка при открытии/создании файла или при чтении/записи в файл
ERR_FILE_FORMAT -4 неверный формат входного файла
OK 0		   выполнение завершено без ошибок

Программа содержит следующие модули:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) Поиск собственных значений матрицы.
Поиск собственных значений для симметричных матриц QR алгоритмом в варианте "метода
вращений", приведение к трехдиагональному виду унитарным подобием методом вращений.
Модуль состоит из:
	* Модуль упрощения sim_01_14.c
	* Вычислительный модуль evc_01_14.c

2) Поиск собственных векторов матрицы
Реализован обратный степенной метод со свдигами. В качестве приближенных значений используются собсвтенные числа найденные
модулем поиска собственных значений.
Модуль состоит из:
	* Модуля поиска собственных векторов vec_01_14.c

3) Решение системы линейных уравнений. Решение СЛАУ методом отражений.
Модуль состоит из:
	* Модуль решения системы линейных уравнений lss_01_14.c


Интерфейсный модуль main_01_14.c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void free_res(double *A, double *E, double *tmp, FILE *fin, FILE *fout)
Освобождает выделененные ресурсы
Вход: матрица A, вектор собственных значений E, временный массив tmp, файл входных данных, файл выходных данных

void print_matrix(int n, double *A)
Вывод матрицы
Вход: размерность матрицы, матрица A

void print_eig_val(int n, double *E)
Вывод вектора собственных значений матрицы
Вход: Размерность векора, вектор собственных значений E

int parse_cmdline(int argc, char **argv, int *in_file, int *out_file, char *out_mode, char *stat_mode, int *max_evc_iter, int *max_vec_iter, double *eps, double *prec)
Разбор параметров командной строки
Вход: количество аргументов командной строки, аргументы командной строки, флаг входного файла, флаг выходного файла, флаг вывода, флаг статистики, максимальное количество итераций, необходимая точность, величнина, значение меньше которой считать равным 0
Выход: в случае не успеха возвращается EXIT

Модуль поиска собственных векторов vec_01_14.c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

double norm_vec(double *X, int n)
Вычисление нормы вектора
Вход: вектор, длина вектора
Выход: норма вектора

void inverse(double *A, double *E, int n)
Поиск обратной матрицы по методу Жордана-Гаусса
Вход: исходная матрица, будующая обратная матрица, размерность

void make_A(double *A, double lambda, int n)
Уменьшение главной диагонали матрицы на заданную величину
Вход: матрица, величина смещения, размерность матрицы

int mult_vec(double *A, double *Xk, double *Xk_1, int n)
Умножение матрицы на вектор
Вход: матрица, вектор, результирующий вектор, размерность

int get_vec(double *A, double *Xk_1, double epsilon, double *Xk, int n, int max_iterations)
Итерационный процесс
Вход: матрица A, следующий вектор, заданная точность, текущий вектор, размерность, максимальное количество итераций
Выход: успешность сходимости за заданное количество итераций

Описание алгоритма работы обратного степeнного метода
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Основной шаг:
	1) Для данного собственного числа осуществляем сдвиг матрицы A: B =  A - (lambda-epsilon*0.1)*I
	   Формула сдвига обоснована тем что данный метод сходится к наименьшему по модулю собственному числу
	2) Для матрицы B находим методом Жордана-Гаусса обратную матрицу B'
	3) Начинаем итерационный процесс поиска собственно вектора для матрицы B', которая отвечает текущему собственному значению

Итерационный процесс
В качестве X0 выбирается вектор X0[i] = rand()%3 + delta
Шаг итерационного процесса:
	Формула итерационного процесса Xk+1 = B'*Xk
	Далее производится нормировка вектора Xk+1
	Затем осуществляется проверка на достижение заданной точности путем покомпонентного сравнения векторов Xk и Xk+1
	Далее полагаем Xk = Xk+1

Благодаря реализации данной разновидности степенного метода удалось достичь значительного ускорения сходимости

